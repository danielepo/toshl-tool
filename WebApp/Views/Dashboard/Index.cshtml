@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Globalization
@using System.Threading
@using Microsoft.Owin.Security.Provider
@model WebApp.Controllers.Graphic
<h2>title</h2>

@{
    var months = new[]
        {
            "January", "February", "March", "April", "May", "June", "July", "August", "September",
            "October", "November", "Dicember"
        };
    var datasets = new List<string>();
    var areasets = new List<string>();
    var arrayForDataset = new List<string>();
    var  arrayForArea = new List<string>();
    var entries = new Dictionary<string, List<double>>();
}
@foreach (var tag in Model.taggedEntries)
{
    var ann = tag.Value.Where(x => x.amount <= 0).Select(x =>
    {
        var date = DateTime.Parse(x.date);
        var month = date.Month;
        return new { x.amount, month };
    });
    var dic = new Dictionary<int, double>();
    foreach (var a in ann)
    {
        if (dic.ContainsKey(a.month))
        {
            dic[a.month] += a.amount;
        }
        else
        {
            dic.Add(a.month, a.amount);
        }
    }
    var values = new List<double>();
    var area = new List<double>();
    for (int index = 0; index < months.Length; index++)
    {
        var month = months[index];

        double value;
        dic.TryGetValue(index + 1, out value);

        values.Add(-value);
    }
    if (tag.Key.name != "Auto")
    {

        for (int index = DateTime.Now.Month - 1; index < months.Length; index++)
        {
            var average = values.Take(DateTime.Now.Month - 1).Average();
            if (Math.Abs(values[index]) < 0.5)
            {
                values[index] = average;
            }
        }
    }

    for (int index = 0; index < values.Count; index++)
    {
        if (index == 0)
        {
            area.Add(values[index]);
        }
        else
        {
            area.Add(values[index] + area[index - 1]);
        }
    }

    Random rand = new Random();
    var backgroundColor = rand.Next(256) + "," + rand.Next(256) + "," + rand.Next(256);
    arrayForDataset.Add( "data1['" + @tag.Key.name + "']=[" + string.Join(",", "ko.observable(" + values + ")") + "];");
    arrayForArea.Add("area1['" + @tag.Key.name + "]'=[" + string.Join(",", "ko.observable(" + area + ")") + "];");
    var dataset = @"{
                label: '" + @tag.Key.name + @"',
                fill: false,
                lineTension: 0.1,
                backgroundColor: 'rgba(" + backgroundColor + @",0.4)',
                borderColor: 'rgba(" + backgroundColor + @",1)',
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: 'rgba(" + backgroundColor + @",1)',
                pointBackgroundColor: '#fff',
                pointBorderWidth: 1,
                pointHoverRadius: 5,
                pointHoverBackgroundColor: 'rgba(" + backgroundColor + @",1)',
                pointHoverBorderColor: 'rgba(220,220,220,1)',
                pointHoverBorderWidth: 2,
                pointRadius: 1,
                pointHitRadius: 10,
                data: data1['" + @tag.Key.name + "']}\n";
    var areaset = @"{
                label: '" + @tag.Key.name + @"',
                fill: false,
                lineTension: 0.1,
                backgroundColor: 'rgba(" + backgroundColor + @",0.4)',
                borderColor: 'rgba(" + backgroundColor + @",1)',
                borderCapStyle: 'butt',
                borderDash: [],
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: 'rgba(" + backgroundColor + @",1)',
                pointBackgroundColor: '#fff',
                pointBorderWidth: 1,
                pointHoverRadius: 5,
                pointHoverBackgroundColor: 'rgba(" + backgroundColor + @",1)',
                pointHoverBorderColor: 'rgba(220,220,220,1)',
                pointHoverBorderWidth: 2,
                pointRadius: 1,
                pointHitRadius: 10,
                data: area1['" + @tag.Key.name + "']}\n";
    datasets.Add(dataset);
    areasets.Add(areaset);

    entries.Add(tag.Key.name, area);
}


@Scripts.Render("~/bundles/chartjs")



<script type="text/javascript">

    var data1 = [];
    var area1 = [];

    var labels = [
        "January", "February", "March", "April", "May", "June", "July", "August", "September",
        "October", "November", "Dicember"
    ];
    var VM = function () {
        this.Data = {
            labels: labels,
            datasets: [
                @Html.Raw(string.Join(",",datasets))
            ]
        };
        this.Area = {
            labels: labels,
            datasets: [
                @Html.Raw(string.Join(",",areasets))
            ]
        };
    }
    @Html.Raw(string.Join("\n", arrayForArea));
    @Html.Raw(string.Join("\n", arrayForDataset));
    @*//@Html.Raw("var vm = new VM(["+string.Join(",",entries.Select(e => "new Entry('"+e.Key+"',["+string.Join(",",e.Value.Select(v => "new Value("+v+")"))+"])"))+"]);")*@
    var vm = new VM();
    jQuery(document).ready(function () {

        ko.applyBindings(vm);

    });
</script>
<canvas id="myChart"  data-bind="chart: { type: 'line', data: Area, options: { observeChanges: true} }"></canvas>
<canvas id="myAreas"  data-bind="chart: { type: 'line', data: Data, options: { observeChanges: true} }"></canvas>

